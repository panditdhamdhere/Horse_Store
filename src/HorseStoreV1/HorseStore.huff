// send calldata -> function dispatch -> function

/* interface */
#define function updateHorseNumber(uint256) nonpayable returns()
#define function readNumberOfHorses() view returns(uint256)

#define constant NUMBER_OF_HORSES_STORAGE_SLOT = FREE_STORAGE_POINTER() // 0
#define constant NUMBER_OF_HORSES_STORAGE_SLOT2 = FREE_STORAGE_POINTER() // 1

#define macro MAIN() = takes(0) returns(0) {
    // 1 bytes = 8 bits

    // How do I cut down the calldata -> function selector
    // 64/2 = 32 bytes-> right
    // I need to right shift 28 bytes, 224 bits
   
    // PUSH1 0xe0      // [0xe0, calldata (32)]
    // shr             // [ Function selector ]
    0x00 calldataload 0xE0 shr // [function_selector]

    // updateHorseNumber selector
    dup1 __FUNC_SIG(updateHorseNumber) eq updatejump jumpi // [] 

    // readNumberOfHorses
     __FUNC_SIG(readNumberOfHorses) eq updatejump jumpi // [] 

    0x00 0x00 revert       // []

  updatejump:
   SET_NUMBER_OF_HORSES()

  readJump:
   GET_NUMBER_OF_HORSES()
  
}

#define macro SET_NUMBER_OF_HORSES() = takes(0) returns(0) {
    // 2. Get the value to store from calldata
    0x04                               // [4]
    calldataload                       // [value]
     // 1. Give it a storage slot
    [NUMBER_OF_HORSES_STORAGE_SLOT]    // [storage_slot, value]

    // 3. sstore opcode
    sstore
    stop // => 0 gas => transaction STOP ends
}

#define macro GET_NUMBER_OF_HORSES() = takes(0) returns(0) {
    // 1. Get the storage slot
    // 2. Load the value of that slot into memory
    // 3. Return
    [NUMBER_OF_HORSES_STORAGE_SLOT]   // [key or index]
    sload                             // [value]
    0x00                              // [0, value]
    mstore                            // []  // Memory: [value]
    // 0x20 => 32 bytes
    0x20 0x00 return                  // []
    // 5f3560e01c8063cdfead2e1461001d5763e026c0171461001d575f5ffd5b6004355f55005b5f545f5260205ff3
}